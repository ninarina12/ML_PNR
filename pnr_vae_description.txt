[1]: Imports packages and sets the seed for reproducibility

Load and process synthetic data

[2]: * Input the sample name and the set number of the dataset generated by pnr_generate.py
     Locates the appropriate directories and collect the metadata output by pnr_generate.py

[3]: Loads and processes (noise, smoothing, and normalization) of spectra
     Identifies the parameter names (y_header) and ids (y_ids) to use in regression task
     Standardizes y-data (parameter values)
     Performs train/valid/test split stratified by class

[4]: Converts data to torch tensors and get relevant dimensions

Define model

[5]: * Input the name (vae, cvae, rvae) for the model to train
     vae: simple VAE with no classification or regression tasks
     cvae: VAE + classifier
     rvae: CVAE + regressors on parameter values
     * Input the number of the model to resume training, or -1 to start a new fit
     * Input the number of models (reps) to train in succession (> 1 to get statistics)
     * Set batch size and number of epochs
     * Set z_std_norm to encourage z_mean to match parameter values (False) or 0 (True)
     * Set model parameters; loss = l_recon + beta_1*KLD + beta_2*(l_class + l_label)

[6]: Sets or gets directories/model parameters based on specified model name and number

[7]: Configures data loaders

Train model

[8]: Trains models (in succession if reps > 1)

Evaluate a representative model

[9]: * Input the repetition to evaluate (e.g. r = 0)
     Loads trained model
     Loads and processes (normalization and smoothing) experimental data

[10]: Plots training history

[11]: Predicts on all synthetic data and store results in dataframe

[12]: Predicts on all experimental data and store results in dataframe

[13]: Prints predictions of i^th experiment (e.g. i = 0 corresponds to 4K data)

[14]-[16]: Plots example reconstructions in each error quartile

[17]: Plots reconstruction of experimental data

[18]-[20]: Visualizes organization of latent space according to y values along 2 dimensions

[21]: Plots regressor performance on parameters

[22]: Finds optimal threshold for classifier and plots classifier performance

Other

[23]: rvae only: Inverts weight matrix mapping z to parameter values
      Can be used to input known parameter values to get z and then decode spectrum (see ex)

Evaluate all models

[24]: Compiles training history and experiment predictions on all models (reps > 1)

[25]: Plots training history statistics

[26]: Plots classification statistics on experimental data